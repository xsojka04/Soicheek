@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Soicheek.DAL.DataModels

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Změna hesla</PageTitle>

<section class="container-fluid py-5">
    <div class="container text-center py-5">
        <h3>Změna hesla</h3>
        <StatusMessage Message="@message" />
        <div class="row justify-content-center py-2">
            <div class="col-md-5">
                <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Prosím, zadejte své staré heslo." />
                        <label for="old-password" class="form-label">Staré heslo</label>
                        <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Prosím, zadejte své nové heslo." />
                        <label for="new-password" class="form-label">Nové heslo</label>
                        <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Prosím, zadejte své nové heslo ještě jednou." />
                        <label for="confirm-password" class="form-label">Zopakujte nové heslo</label>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                    </div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Změnit heslo</button>
                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("Uživatel změnil své heslo.");

        RedirectManager.RedirectToCurrentPageWithStatus("Heslo bylo úspěšně změněno.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage ="Staré heslo není vyplněno")]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required(ErrorMessage = "Nové heslo není vyplněno")]
        [StringLength(100, ErrorMessage = "Nové heslo musí být minimálně {2} a maximálně {1} dlouhé.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "Hesla se neshodují.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
